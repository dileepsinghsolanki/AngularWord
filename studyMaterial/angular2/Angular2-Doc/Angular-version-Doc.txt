********* Difference between Angular 1.x and Angular 2
=> Angular 1.x was not built with mobile support in mind, where Angular 2 is mobile oriented.
=> Angular 2 provides more choice for languages. You can use any of the language from ES5, ES6, TypeScript or Dart to write Angular 2 code
=> AngularJS 1.x is easy to set up. All you need to do is to add reference of the library and you are good to go. Where Angular 2 is dependent of other libraries and it requires some efforts to set up it
=> AngularJS 1.x is easy to set up. All you need to do is to add reference of the library and you are good to go. Where Angular 2 is dependent of other libraries and it requires some efforts to set up it
=> Angular 1.x controllers and $scope are gone. We can say that controllers are replaced with “Components” in Angular 2
=> Structural directives syntax is changed. ng-repeat is replaced with *ngFor.
=> In Angular 2, local variables are defined using hash(#) prefix (see above code for *ngFor).
=> Angular 2 uses camelCase syntax for built-in directives. For example
=> In Angular 1.x, we can define a service via 5 different ways.Like Factory, Service, Provider, Constant, Values  And in Angular 2, class is the only way to define a service.
=> In Angular 1.x, we use $routeProvider.when() to configuring routing. Where in Angular 2, @RouteConfig{(...}) is used. ng-view present in Angular 1.x is replaced with <router-outlet>

********* Why skipped Angular 3
=> The angular team already updated @angular/router with version 3.X before Angular 3 would have been released that's because of major development on router packages, like router-preload. So to avoid such confusion between Angular package with angular version. They decided to skip the Angular version 3 and directly released angular 4.

=> To prevent conflict of the router package version, the Angular team decided to skip the version 3 go straight for Angular v4.
Like : angular/router: v3.3.0

********* Angular 4
Angular 4 contains some additional Enhancement and Improvement. Consider the following enhancements.

1. Smaller & Faster Apps
2. View Engine Size Reduce
3. Animation Package
4. NgIf and ngFor Improvement
5. Template
6. NgIf with Else
7. Use of AS keyword
8. Pipes
9. HTTP Request Simplified
10. Apps Testing Simplified
11. Introduce Meta Tags
12. Added some Forms Validators Attributes
13. Added Compare Select Options
14. Enhancement in Router
15. Added Optional Parameter
16. Improvement Internationalization

=> Upgrade of the version from 2.0 to 4.0 has reduced it’s bundled file size by 60%. The code generated is reduced and has accelerated the application development. Here the developed code can be used for prod mode and debug.
=> Angular v4.0 is compatible with newer versions TypeScript 2.1 and TypeScript 2.2. This helps with better type checking and also enhanced IDE features for Visual Studio Code.
=>  ngIf with a new else statement 
-- <div *ngIf="isLoggedIn; else loggedOut">
  Welcome back, friend.
</div>

<ng-template #loggedOut>
  Please friend, login.
</ng-template>

=> Mobile Support
=> Component-based UI
=>View engine with less code 
=> Router ParamMap
=> Animation support
=> Http: Adding search parameters to an HTTP request has been simplified. 
=> SEO Friendly
=>Faster and Compact
=> angular Universal

*********** Angular5
The Angular 5 Contains bunch of new features, performance improvements and lot of bug fixes and also some surprises to Angular lovers.

· Make AOT the default
· Watch mode
· Type checking in templates
· More flexible metadata
· Remove *.ngfactory.ts files
· Better error messages
· Smooth upgrades
· Tree-Shakeable components
· Hybrid Upgrade Application
· And so on...
Angular 5 Performance Improvements - Angular 5
· Use of addEventListener for the faster rendering and it is the core functionality.
· Update to new version of build-optimizer.
· Added some Improvements on the abstract class methods and interfaces
· Remove decorator DSL which depends on Reflect for Improve the Performance of Apps and This is the core functionality.
· Added an option to remove blank text nodes from compiled templates
· Switch Angular to use Static-Injector instead of Reflective-Injector.
· Improve the applications testing.
· Improve the performance of hybrid applications
· Improvements on Lazy loading for Angular
Some Improvement on HttpClient – This is used for Applications communicate with backend services over the HTTP protocol!

· Improvement on Type-checking the response
· Improvement on Reading the full response
· Improvement on Error handling and fetching error details
· Improvement on Intercepting all requests or responses
· Improvement on Logging
· Improvement on Caching
· Improvement on XSRF Protection
Added Features - Angular 5

· Added Representation of Placeholders to xliff and xmb in the compiler
· Added an Options Arg to Abstract Controls in the forms controls
· Added add default updateOn values for groups and arrays to form controls
· Added updateOn blur option to form controls
· Added updateOn submit option to form controls
· Added an Events Tracking Activation of Individual Routes
· Added NgTemplateOutlet API as stable in the common controls
· Create StaticInjector which does not depend on Reflect polyfill
· Added [@.disabled] attribute to disable animation children in the animations

Router Life Cycle Events – Angular 5
Added new router life cycle events for Guards and Resolvers -

· GuardsCheckStart,
· GuardsCheckEnd,
· ResolveStart and
· ResolveEnd

Angular 5 Bug Fixes - Angular 5

· Fixed compilation error by using the correct type for providers
· Skip PWA test when redeploying non-public commit
· Don't strip CSS source maps. This is the compiler related fix
· Remove tsickle (language-service) dependency

· Support persisting dynamic styles within animation states

· Ignore @import in multi-line css
· Fix platform-browser-dynamic
· Forbid destroyed views to be inserted or moved in VC
· Support persisting dynamic styles within animation states
When Angular 5 was released, it came with a whole bunch of new features, service improvements, and bug fixes from version 4. They have added very interesting features like the main focus of Angular version 5 is to make angular faster, with improved loading time as well as execution time. New build optimizer which helps to reduce the code of progressive apps designed through a framework.

=> Built Optimizer
=> type script 2.5
=> Angular Universal State Transfer
=> Compiler Improvements
=> HttpClient
-->  replace HttpModule with Http Client Module
--> Inject the HttpClient service
-->  remove any map(res =>res.json()) calls, which are no longer needed.
=> Preserve Whitespace
=> Improve Decorators
=>Angular-cli 1.5
=> Improvements on Lazy loading for Angular


******************* Comparision Between Angular 2 Angular 4 and Angular 5

Angular 2	Angular 4	Angular 5
DI	---     			Faster And Compact  	-------			Build Optimizer
Decorators				Animation Support						Angular Universal and State Transfer
Child Injectors			*nglf and *ngFor improvements			Compiler Improvements
Instance Scopes			Angular Universal	TypeScript
Dynamic Loading			Type Script 2.1 and 2.2	Preserve 		White Spaces
Templating	–													Improved Decorators
Directives	–													Internationalized Number, Date and Currency pipes
Child Routers	–												Replaced ReflectiveInjector  with StaticInjector
Guards	–														Zone Seed Improvements
Design	–														exportAs
Logging	–														HttpClient
Scopes	–														AngularCli 1.5
–	–															updateOn Blur / Submit
–	–															Rxjs 5.5
–	–															New Router Lifecycle
[ –universal-app <universal-app-name>] [ –route <route>]

************ Angular 6
=> ng update & ng add : Similar to ng update, the new ng add command allows to add and configure new libraries into a project with a simple command
--exa: $ ng add @angular/material
=> Other CLI changes:
-- Angular projects that use the CLI historically had a configuration file called .angular-cli.json. With version 6 of the CLI, this file is now renamed to angular.json and its structure also changes
=> TypeScript 2.7 & RxJS 6
=> Angular Material over to Angular 6.
=> Updating the CLI
-- Update to v6 of the Angular CLI both globally and locally to the project:
# updating using npm
$ npm i -g @angular/cli
$ npm i @angular/cli
=> Declaring the providers inside the service itself
=> Use ng-template instead of template directive
-- You can use ng-template to render the HTML instead of the template tag in the new version of Angular. ng-template is an Angular element, and it works when it is used with a structural directive such as *ngFor and *ngIf

<ng-template [ngIf]="isLoggedIn">
  <div>
    Welcome back, friend.
  </div>
</ng-template>

Running ng update
You can now run ng update for the CLI, Angular core and Angular Material.

First, updating the CLI will convert the configuration file to the new format (angular.json) and update various project configs:

$ ng update @angular/cli
Next, run ng update for the Angular core packages:

$ ng update @angular/core
And then you can also run ng update to update Angular Material and RxJS:

$ ng update @angular/material
$ ng update rxjs